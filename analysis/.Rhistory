this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
if ( is.null(this_pb) )
next
else if ( nrow(this_pb) < 6 ) {
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
participant_breakdown <- as.data.frame(participant_breakdown)
colnames(participant_breakdown) <- c("ID", "condition", "genre", "order", "wm")
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
complete_data <- participant_breakdown[tallied_conditions$n==3,]
complete_data <- participant_breakdown[participant_breakdown$ID %in% unique(complete_datasets$ID),]
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
first_trial %>% as.matrix() %>% as.data.frame() %>% group_by(wm) %>% tally()
first_trial %>% as.matrix() %>% as.data.frame() %>% group_by(wm, genre, order) %>% tally() %>% arrange(order)
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")],
this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")])
this_pb
this
this_data$open_text_response.text
this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <-
if ( is.null(this_pb) )
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
rating
ratings
!is.null(ratings)
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
file_names
strsplit(file_names,"_")
strsplit(file_names,"_")[[1]]
lapply(strsplit(all_data,"_"), '[[', 1)
unlist(lapply(strsplit(all_data,"_"), '[[', 1))
unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1))))
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) )
print(file)
next
#else if ( nrow(this)) {
#  next
} else if ( nrow(this_pb) < 6 ) {
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) {
print(file)
next
#else if ( nrow(this)) {
#  next
} else if ( nrow(this_pb) < 6 ) {
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
participant_breakdown <- as.data.frame(participant_breakdown)
colnames(participant_breakdown) <- c("ID", "condition", "genre", "order", "wm")
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
print(paste("Number of complete & unique datasets: ",
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))))) # should be the same
complete_data <- participant_breakdown[tallied_conditions$n==3,]
complete_data <- participant_breakdown[participant_breakdown$ID %in% unique(complete_datasets$ID),]
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
file_names
library(tidyverse)
# set path to current directory
data_path <- c('../data')
all_data <- list.files(data_path, pattern = ".csv") # all csv files
participant_IDs <- unlist(lapply(strsplit(all_data,"_"), '[[', 1)) # extract participant ID
true_participants <- !stringr::str_starts(participant_IDs, "00") # remove those IDs that start with 00, such as 001 or 002
true_data <- all_data[true_participants]
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) {
print(file)
next
#else if ( nrow(this)) {
#  next
} else if ( nrow(this_pb) < 6 ) {
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
participant_breakdown <- as.data.frame(participant_breakdown)
colnames(participant_breakdown) <- c("ID", "condition", "genre", "order", "wm")
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
print(paste("Number of complete & unique datasets: ",
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))))) # should be the same
complete_data <- participant_breakdown[tallied_conditions$n==3,]
complete_data <- participant_breakdown[participant_breakdown$ID %in% unique(complete_datasets$ID),]
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
file = "5236_musical_judgments_2021-12-15_10h59.07.433.csv"
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
this_pb
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) {
next
#else if ( nrow(this)) {
#  next
} else if ( nrow(this_pb) < 6 ) {
print(file)
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
participant_breakdown <- as.data.frame(participant_breakdown)
colnames(participant_breakdown) <- c("ID", "condition", "genre", "order", "wm")
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
print(paste("Number of complete & unique datasets: ",
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))))) # should be the same
complete_data <- participant_breakdown[tallied_conditions$n==3,]
complete_data <- participant_breakdown[participant_breakdown$ID %in% unique(complete_datasets$ID),]
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
file = "5311_musical_judgments_2021-12-13_16h52.37.901.csv"
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
this_pb
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
ratings
this_pb
this_data
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
ratings
this_pb
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
openbox
3*2*4
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) { # no data
print(paste0("No data for file:", file))
next
} else if ( nrow(this_pb) < 6 ) { # not all conditions seen
next
} else if ( nrow(ratings) < 3*2*4) { # not all ratings given, N = levels of prime * genres * questions
next
} else if (nrow(openbox) < 3*2*2) { # not all open-text responses given, N = levels * genre * 2 boxes
print(paste0("Incomplete data for file:", file))
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) { # no data
print(paste0("No data for file:", file))
next
} else if ( nrow(this_pb) < 6 ) { # not all conditions seen
next
} else if ( nrow(ratings) < (3*2*4) ) { # not all ratings given, N = levels of prime * genres * questions
next
} else if (nrow(openbox) < (3*2*2) ) { # not all open-text responses given, N = levels * genre * 2 boxes
print(paste0("Incomplete data for file:", file))
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
ratings
nrow(ratings)
nrow(openbox)
openvbox
openbox
ncol(openbox_
openbox)
ncol(openbox)
length(openbox)
length(ratings)
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) { # no data
print(paste0("No data for file:", file))
next
} else if ( nrow(this_pb) < 6 ) { # not all conditions seen
next
} else if ( length(ratings) < (3*2*4) ) { # not all ratings given, N = levels of prime * genres * questions
next
} else if ( length(openbox) < (3*2*2) ) { # not all open-text responses given, N = levels * genre * 2 boxes
print(paste0("Incomplete data for file:", file))
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
participant_breakdown <- as.data.frame(participant_breakdown)
colnames(participant_breakdown) <- c("ID", "condition", "genre", "order", "wm")
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
print(paste("Number of complete & unique datasets: ",
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))))) # should be the same
complete_data <- participant_breakdown[tallied_conditions$n==3,]
complete_data <- participant_breakdown[participant_breakdown$ID %in% unique(complete_datasets$ID),]
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) { # no data
# print(paste("No data for file:", file))
next
} else if ( nrow(this_pb) < 6 ) { # not all conditions seen
next
} else if ( length(ratings) < (3*2*4) ) { # not all ratings given, N = levels of prime * genres * questions
next
} else if ( length(openbox) < (3*2*2) ) { # not all open-text responses given, N = levels * genre * 2 boxes
print(paste("Incomplete data for file:", file))
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
participant_breakdown <- as.data.frame(participant_breakdown)
colnames(participant_breakdown) <- c("ID", "condition", "genre", "order", "wm")
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
print(paste("Number of complete & unique datasets: ",
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))))) # should be the same
complete_data <- participant_breakdown[tallied_conditions$n==3,]
complete_data <- participant_breakdown[participant_breakdown$ID %in% unique(complete_datasets$ID),]
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
file_names <- matrix(nrow = 0, ncol = 1)
participant_breakdown <- matrix(nrow = 0, ncol = 5)
for (file in true_data) {
this_data <- read.csv(file.path(data_path, file))
this_pb <- cbind(this_data$condition[which(this_data$condition!="")],
this_data$genre[which(this_data$genre!="")],
this_data$order[which(this_data$order!="")])
wm <- this_data$wm_recall_response.text[which(this_data$wm_recall_response.text!="")]
ratings <- this_data$ratings_slider.response[which(this_data$ratings_slider.response!="")]
openbox <- this_data$open_text_response.text[which(this_data$open_text_response.text!="")]
if ( is.null(this_pb) ) { # no data
print(paste("No data for file:", file))
next
} else if ( nrow(this_pb) < 6 ) { # not all conditions seen
print(paste("Incomplete data for file:", file))
next
} else if ( length(ratings) < (3*2*4) ) { # not all ratings given, N = levels of prime * genres * questions
print(paste("Incomplete data for file:", file))
next
} else if ( length(openbox) < (3*2*2) ) { # not all open-text responses given, N = levels * genre * 2 boxes
print(paste("Incomplete data for file:", file))
next
} else {
if (is.null(wm)) {
this_pb <- cbind(this_pb, rep(0, nrow(this_pb)))
} else {
this_pb <- cbind(this_pb, rep(1, nrow(this_pb)))
}
this_pb <- cbind(rep(strsplit(file,"_")[[1]][1], nrow(this_pb)), this_pb)
participant_breakdown <- rbind(participant_breakdown, this_pb)
file_names <- rbind(file_names, file)
}
}
participant_breakdown <- as.data.frame(participant_breakdown)
colnames(participant_breakdown) <- c("ID", "condition", "genre", "order", "wm")
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
print(paste("Number of complete datasets: ", length(unique(complete_datasets$ID))))
print(paste("Number of complete & unique datasets: ",
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))))) # should be the same
complete_data <- participant_breakdown[tallied_conditions$n==3,]
complete_data <- participant_breakdown[participant_breakdown$ID %in% unique(complete_datasets$ID),]
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
first_trial %>% as.matrix() %>% as.data.frame() %>% group_by(wm) %>% tally()
first_trial %>% as.matrix() %>% as.data.frame() %>% group_by(wm, genre, order) %>% tally() %>% arrange(order)
participant_breakdown
return(list(participant_breakdown = participant_breakdown, file_names = file_names))
source('D:/GitRepos/RRI_analysis/analysis/funs.R')
filtered_data <- filter_data_verbose(true_data)
filtered
filtered_data
source('D:/GitRepos/RRI_analysis/analysis/funs.R')
filtered_data <- filter_data_verbose(true_data) # returns a list with a matrix of simplified data, and a list of filenames
source('D:/GitRepos/RRI_analysis/analysis/funs.R')
filtered_data <- filter_data_verbose(true_data) # returns a list with a matrix of simplified data, and a list of filenames
participant_breakdown <- filtered_data$participant_breakdown
participant_breakdown
# double check that all conditions are there, i.e. three trials for each genre for each participant
tallied_conditions <- participant_breakdown %>% group_by(ID, genre) %>% tally()
tallied_conditions
# sort the compelte datasets
complete_datasets <- tallied_conditions[tallied_conditions$n==3,]
complete_datasets
source('D:/GitRepos/RRI_analysis/analysis/funs.R')
complete_data <- filtered_data$participant_breakdown
complete_data
source('D:/GitRepos/RRI_analysis/analysis/funs.R')
filtered_data <- filter_data_verbose(true_data) # returns a list with a matrix of simplified data, and a list of filenames
complete_data <- filtered_data$participant_breakdown # get variables
file_names <- filtered_data$file_names
# print
print(paste("Number of complete datasets: ", length(unique(complete_data$ID))))
print(paste("Number of complete & unique datasets: ",
length(unique(unlist(lapply(strsplit(file_names,"_"), '[[', 1)))))) # should be the same
# what was the first trial observed for each participant (this tells you the order of genre, of prime presentation (in order col), and wm (in wm col))
first_trial <- complete_data %>% group_by(ID, order) %>% slice(1)
first_trial %>% as.matrix() %>% as.data.frame() %>% group_by(wm) %>% tally()
first_trial %>% as.matrix() %>% as.data.frame() %>% group_by(wm, genre, order) %>% tally() %>% arrange(order)
filtered_data <- filter_data_verbose(true_data) # returns a list with a matrix of simplified data, and a list of filenames
source('D:/GitRepos/RRI_data_materials/materials/funs.R')
source('funs.R')
setwd("D:/GitRepos/RRI_analysis/analysis")
library(tidyverse)
# set path to current directory
data_path <- c('../../RRI_data_materials/data')
source('funs.R')
all_data <- list.files(data_path, pattern = ".csv") # all csv files
participant_IDs <- unlist(lapply(strsplit(all_data,"_"), '[[', 1)) # extract participant ID
true_participants <- !stringr::str_starts(participant_IDs, "00") # remove those IDs that start with 00, such as 001 or 002
true_data <- all_data[true_participants]
data_breakdown <- filter_data(true_data)
source('D:/GitRepos/RRI_analysis/analysis/funs.R')
filtered_data_files <- filter_data(true_data)
filtered_data_files
source('D:/GitRepos/RRI_analysis/analysis/funs.R')
wrangled_data <- wrangle_data(data_path, filtered_data_files)
data <- wrangled_data$data
demographics <- wrangled_data$demgraphics
rating_data <- data[!is.na(data$rating),] %>% mutate(rating = as.numeric(rating))
rating_summary <- rating_data %>% group_by(wm, condition, question_n) %>% summarise(mean_rating = mean(rating),
sd_rating = sd(rating),
se_rating = sd_rating/sqrt(nrow(rating_data)))
ratings_mu_summary <- rating_data %>% group_by(wm, condition) %>% summarise(mean_rating = mean(rating),
sd_rating = sd(rating),
se_rating = sd_rating/sqrt(nrow(rating_data)))
# mean, se ratings ~ prestige level * working memory * question
ggplot(rating_summary) +
geom_point(aes(question_n, mean_rating, color = condition)) +
geom_errorbar(aes(x = question_n, y = mean_rating, ymin = mean_rating-se_rating, ymax = mean_rating+se_rating, color = condition)) +
geom_line(aes(question_n, mean_rating, group = condition, color = condition)) +
facet_grid(. ~ wm)
# mean, se ratings ~ prestige level * working memory
ggplot(ratings_mu_summary) +
geom_point(aes(1, mean_rating, color = condition)) +
geom_errorbar(aes(x = 1, y = mean_rating, ymin = mean_rating-se_rating, ymax = mean_rating+se_rating, color = condition)) +
#geom_line(aes(question_n, mean_rating, group = condition, color = condition)) +
facet_grid(. ~ wm)
genre_summary <- rating_data %>% group_by(wm, condition, genre) %>% summarise(mean_rating = mean(rating),
sd_rating = sd(rating),
se_rating = sd_rating/sqrt(nrow(rating_data)))
# mean, se ratings ~ prestige level * working memory * question
ggplot(genre_summary) +
geom_point(aes(genre, mean_rating, color = condition)) +
#geom_col(aes(genre, scale(mean_rating), color = condition, fill = condition), alpha = 0.7, position = position_dodge()) +
geom_errorbar(aes(x = genre, y = mean_rating, ymin = mean_rating-se_rating, ymax = mean_rating+se_rating, color = condition)) +
geom_line(aes(genre, mean_rating, group = condition, color = condition)) +
facet_grid(. ~ wm)
